{% set name = "cupy" %}
{% set version = "12.1.0" %}
{% set sha256 = "f6d31989cdb2d96581da12822e28b102f29e254427195c2017eac327869b7320" %}

{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% set cuda_minor = 0 %}
{% set cuda_major_minor = (0, 0) %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.2").split(".")[0]|int %}
{% set cuda_minor = environ.get("cuda_compiler_version", "11.2").split(".")[1]|int %}
{% set cuda_major_minor = (cuda_major, cuda_minor) %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
    sha256: {{ sha256 }}
    patches:
      - support_new_cuda_layout.diff  # [(linux and cuda_compiler_version == "12.0") or (build_platform != target_platform)]

build:
  number: 0
  # TODO: turn on win64 + CUDA 12 once it's ready
  # TODO: turn on aarch64 + CUDA 12 once glibc 2.28 is ready
  skip: true  # [cuda_compiler_version == "None" or (cuda_compiler_version == "12.0" and not linux64)]
  script:
    - export CUPY_NVCC_GENERATE_CODE="arch=compute_60,code=sm_60;arch=compute_70,code=sm_70;arch=compute_80,code=sm_80"  # [aarch64]
    # CuPy default detects CUDA from nvcc, but on Conda-Forge's dockers nvcc lives in a different place...
    # With conda-forge/nvcc-feedstock#58, CUDA_PATH is set correctly
    - export NVCC=$(which nvcc)                                                  # [linux]
    {% if cuda_major_minor == (12, 0) %}
    - export CUPY_NUM_BUILD_JOBS=1                                               # [aarch64 and (build_platform == target_platform)]
    - export CUDA_PATH=$PREFIX/targets/{{ target_name }}                         # [linux]
    - export CUPY_NVCC_GENERATE_CODE="$CUPY_NVCC_GENERATE_CODE;arch=compute_90,code=sm_90;arch=compute_90,code=sm_90a"  # [aarch64]
    {% endif %}
    - echo "nvcc is $NVCC, CUDA path is $CUDA_PATH"                              # [linux]
    - for /f "tokens=* usebackq" %%f in (`where nvcc`) do (set "dummy=%%f" && call set "NVCC=%%dummy:\=\\%%")  # [win]
    # we use this WAR until we figure out how to proceed with conda-forge/nvcc-feedstock#88
    - set "NVCC=%NVCC% --use-local-env"  # [win64]
    - echo "nvcc is %NVCC%, CUDA path is %CUDA_PATH%"  # [win]
    {% if cuda_major_minor >= (11, 2) %}
    - export CUSPARSELT_PATH=$PREFIX  # [linux64 or win]
    {% endif %}
    # Workaround __ieee128 error; see https://github.com/LLNL/blt/issues/341
    - export NVCC="$NVCC -Xcompiler -mno-float128"  # [ppc64le]

    - {{ PYTHON }} -m pip install . --no-deps -vv
    - if errorlevel 1 exit 1  # [win]

    # copy activate/deactivate scripts
    - mkdir -p "${PREFIX}/etc/conda/activate.d"                                               # [linux]
    - cp "${RECIPE_DIR}/activate.sh" "${PREFIX}/etc/conda/activate.d/cupy_activate.sh"        # [linux]
    - mkdir -p "${PREFIX}/etc/conda/deactivate.d"                                             # [linux]
    - cp "${RECIPE_DIR}/deactivate.sh" "${PREFIX}/etc/conda/deactivate.d/cupy_deactivate.sh"  # [linux]
    - if not exist %PREFIX%\etc\conda\activate.d mkdir %PREFIX%\etc\conda\activate.d          # [win]
    - copy %RECIPE_DIR%\activate.bat %PREFIX%\etc\conda\activate.d\cupy_activate.bat          # [win]
    - if not exist %PREFIX%\etc\conda\deactivate.d mkdir %PREFIX%\etc\conda\deactivate.d      # [win]
    - copy %RECIPE_DIR%\deactivate.bat %PREFIX%\etc\conda\deactivate.d\cupy_deactivate.bat    # [win]

    # enable CuPy's preload mechanism
    - mkdir -p "${SP_DIR}/cupy/.data/"                                                                                     # [linux]
    - if not exist %SP_DIR%\cupy\.data mkdir %SP_DIR%\cupy\.data                                                           # [win]
    {% if cuda_major_minor >= (11, 2) %}
    - cp ${RECIPE_DIR}/preload_config/linux64_cuda11_wheel.json ${SP_DIR}/cupy/.data/_wheel.json                           # [linux]
    - copy %RECIPE_DIR%\preload_config\win64_cuda11_wheel.json %SP_DIR%\cupy\.data\_wheel.json                             # [win]
    {% else %}
    - cp ${RECIPE_DIR}/preload_config/linux64_cuda{{ cuda_compiler_version }}_wheel.json ${SP_DIR}/cupy/.data/_wheel.json  # [linux]
    - copy %RECIPE_DIR%\preload_config\win64_cuda{{ cuda_compiler_version }}_wheel.json %SP_DIR%\cupy\.data\_wheel.json    # [win]
    {% endif %}
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux]
    - '*/nvcuda.dll'  # [win]
  ignore_run_exports:
    # optional dependencies
    - cudnn  # [not (aarch64 and cuda_compiler_version == "12.0")]
    # TODO: wait for NCCL to catch up
    - nccl  # [linux and cuda_compiler_version != "12.0"]
    - cutensor
    - cusparselt  # [(linux64 or win) and cuda_compiler_version == "11.2"]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}
    #- cuda-nvcc
    - sysroot_{{ target_platform }} 2.17    # [linux]
    - cross-python_{{ target_platform }}    # [build_platform != target_platform]
    - python                                # [build_platform != target_platform]
    - cython >=0.29.22,<3                   # [build_platform != target_platform]
    # TODO: clean up
    {% if cuda_major_minor == (12, 0) %}
    - cuda-driver-dev                       # [build_platform != target_platform]
    - cuda-cudart-dev                       # [build_platform != target_platform]
    - cuda-nvrtc-dev                        # [build_platform != target_platform]
    - cuda-nvtx-dev                         # [build_platform != target_platform]
    - cuda-profiler-api                     # [build_platform != target_platform]
    - cuda-cccl_{{ build_platform }}        # [build_platform != target_platform]
    - libcublas-dev                         # [build_platform != target_platform]
    - libcufft-dev                          # [build_platform != target_platform]
    - libcurand-dev                         # [build_platform != target_platform]
    - libcusolver-dev                       # [build_platform != target_platform]
    - libcusparse-dev                       # [build_platform != target_platform]
    {% endif %}
    # optional dependencies for CUDA 11.2+
    - cudnn >=8                             # [build_platform != target_platform and (not linux64 and cuda_compiler_version != "12.0")]
    - nccl >=2.8                            # [build_platform != target_platform and cuda_compiler_version != "12.0"]
    - cutensor >=1.4                        # [build_platform != target_platform]

  host:
    - python
    - pip
    - setuptools
    - cython >=0.29.22,<3
    - fastrlock >=0.5
    - cuda-version {{ cuda_compiler_version }}
    # TODO: clean up
    {% if cuda_major_minor == (12, 0) %}
    - cuda-driver-dev
    - cuda-cudart-dev
    - cuda-nvrtc-dev
    - cuda-nvtx-dev
    - cuda-profiler-api
    - cuda-cccl_{{ target_platform }}
    - libcublas-dev
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
    - libcusparse-dev
    {% endif %}
    # optional dependencies
    # TODO: see https://github.com/conda-forge/cudnn-feedstock/issues/58
    - cudnn >=8           # [not ((aarch64 or ppc64le) and cuda_compiler_version == "12.0")]
    # TODO: wait for NCCL to catch up
    - nccl >=2.8          # [linux and cuda_compiler_version != "12.0"]
    - cutensor >=1.4,<2
    - cusparselt 0.2.0.*  # [(linux64 or win) and cuda_compiler_version == "11.2"]

  run:
    - python
    - {{ pin_compatible('fastrlock', max_pin='x.x') }}
    - numpy >=1.21
    {% if cuda_major_minor == (12, 0) %}
    - cuda-version >={{ cuda_major }}.0,<{{ cuda_major+1 }}
    {% elif cuda_major_minor == (11, 2) %}
    - cuda-version >={{ cuda_major }}.2,<{{ cuda_major+1 }}
    {% else %}
    - cuda-version {{ cuda_compiler_version }}
    {% endif %}

  run_constrained:
    # Only GLIBC_2.17 or older symbols present
    - __glibc >=2.17      # [linux]
    - scipy >=1.7
    - optuna >=3
    - {{ pin_compatible('cudnn') }}                        # [not ((aarch64 or ppc64le) and cuda_compiler_version == "12.0")]
    # TODO: wait for NCCL to catch up
    - {{ pin_compatible('nccl') }}                         # [linux and cuda_compiler_version != "12.0"]
    - {{ pin_compatible('cutensor', lower_bound='1.3') }}
    - {{ pin_compatible('cusparselt', max_pin='x.x') }}    # [(linux64 or win) and cuda_compiler_version == "11.2"]

test:
  requires:
    {% if cuda_major_minor == (12, 0) %}
    - cuda-driver-dev  # need the libcuda stub for import test
    {% endif %}

  source_files:
    - tests

about:
  home: https://cupy.dev/
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: |
    CuPy: NumPy & SciPy for GPU
  dev_url: https://github.com/cupy/cupy/
  doc_url: https://docs.cupy.dev/en/stable/

extra:
  recipe-maintainers:
    - jakirkham
    - leofang
    - kmaehashi
    - asi1024
    - emcastillo
    - toslunar
